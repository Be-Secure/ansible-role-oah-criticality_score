- name: Check if snap present
  shell: snap --version
  failed_when: false
  register: snap_check

- name: Print message
  debug:
    msg: "Snap already present {{ snap_check.stdout }}"
  when: snap_check.stdout != ''

- name: Install snap
  become: yes
  apt:
    name: snapd
    state: present
  when: snap_check.stdout == ''


- name: Check if go exists
  shell: go version
  failed_when: false
  register: go_check

- name: Print message
  debug:
    msg: "Go already exists {{ go_check }}"
  failed_when: false
  when: go_check.stdout != ''

- name: Install Go
  become: yes
  command: snap install --classic --channel="{{ go_version }}"/"{{ go_channel }}" go
  when: go_check.stdout == ''

- name: Adding paths to .bashrc
  lineinfile:
    dest: ~/.bashrc
    line: "{{ item }}"
    create: yes
  loop:
    - "export GOPATH=$HOME/go"
    - "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin"
  register: lineinfile_result

# - debug:
#     var: lineinfile_result

- name: Exporting vars
  shell: |
    export GOPATH=$HOME/go
    export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin


- name: Check if var is set
  debug:
    msg: "GOPATH:{{ lookup('env','GOPATH') }}"

- name: Check if var is set
  debug:
    msg: "PATH:{{ lookup('env','PATH') }}"

# - name: Validate criticality_score installation
#   stat:
#     path: "{{ lookup('env','GOPATH') }}/bin/criticality_score"
#   register: criticality_file

- name: Validate criticality_score installation
  stat:
    path: "{{ lookup('env','GOPATH') }}/bin/criticality_score"
  register: criticality_file

# - name: Print criticality_file variable
#   debug:
#     var: criticality_file

- name: Print message if criticality_score is already installed
  debug:
    msg: "criticality_score already installed"
  when: criticality_file.stat.exists

- name: Install criticality_score if not already installed
  command: go install github.com/ossf/criticality_score/cmd/criticality_score@"{{ criticality_score_version }}"
  when: not criticality_file.stat.exists



- name: Checking if github auth token available
  debug:
    msg: Github auth token is available
  when: lookup('env','GITHUB_AUTH_TOKEN') != ''

- name: Setting Github Auth token
  shell: "export GITHUB_AUTH_TOKEN={{ lookup('env','GITHUB_AUTH_TOKEN') }}"
  when: lookup('env','GITHUB_AUTH_TOKEN') != ''

- name: Print token message
  debug: 
    msg: "Run export GITHUB_AUTH_TOKEN=<your github token>"
  when: lookup('env','GITHUB_AUTH_TOKEN') == ''
